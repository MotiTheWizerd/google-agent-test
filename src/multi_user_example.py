"""Multi-user example demonstrating the agents manager with proper session management."""\n\nimport asyncio\nimport os\nfrom dotenv import load_dotenv\n\n# Add src to Python path\nimport sys\nsys.path.insert(0, os.path.join(os.path.dirname(__file__), '..'))\n\nfrom modules.core.agents_manager import AgentsManager\nfrom modules.core.workflow_builder import WorkflowBuilder\n\n\n# Load environment variables\nload_dotenv()\n\n\ndef get_current_weather(location: str) -> str:\n    """Mock tool to get current weather."""\n    return f"The weather in {location} is sunny with a temperature of 22Â°C (72Â°F)."\n\n\ndef search_web(query: str) -> str:\n    """Mock tool to search the web."""\n    return f"Search results for '{query}': This is a mock search result. In a real implementation, this would contain actual information about {query}."\n\n\nasync def main():\n    """Main multi-user example function."""\n    # Create agents manager\n    manager = AgentsManager(app_name="multi_user_example_app")\n    \n    # Register tools\n    manager.register_tool("get_weather", get_current_weather)\n    manager.register_tool("search_web", search_web)\n    \n    # Create a weather assistant workflow\n    builder = manager.create_workflow_builder("weather_assistant")\n    builder.set_description("Weather assistant that provides weather information")\n    \n    # Add a weather agent\n    builder.add_llm_agent(\n        name="weather_agent",\n        model="gemini-2.0-flash",\n        instruction="You are a weather assistant. Use the get_weather tool to provide weather information for locations. Be friendly and helpful.",\n        tools=["get_weather"],\n        output_key="weather_info"\n    )\n    \n    # Build and register workflow\n    workflow = builder.set_entry_point("weather_agent").build()\n    manager.register_workflow(workflow)\n    \n    # Print workflow info\n    manager.print_workflow_info("weather_assistant")\n    \n    # Simulate multiple users using the system\n    users = [\n        {"user_id": "user_001", "session_id": "sess_001", "query": "What's the weather like in New York?"},\n        {"user_id": "user_002", "session_id": "sess_002", "query": "How's the weather in London?"},\n        {"user_id": "user_003", "session_id": "sess_003", "query": "What's the weather in Tokyo?"},\n    ]\n    \n    # Run workflows for each user\n    results = []\n    for user in users:\n        print(f"\\n{'='*50}")\n        print(f"Running workflow for {user['user_id']} in session {user['session_id']}")\n        print('='*50)\n        \n        try:\n            result = await manager.run_workflow(\n                workflow_name="weather_assistant",\n                input_text=user["query"],\n                user_id=user["user_id"],\n                session_id=user["session_id"]\n            )\n            results.append(result)\n        except Exception as e:\n            print(f"Error running workflow for {user['user_id']}: {e}")\n    \n    # Demonstrate session reuse\n    print(f"\\n{'='*50}")\n    print("Reusing session for user_001")\n    print('='*50)\n    \n    try:\n        result = await manager.run_workflow(\n            workflow_name="weather_assistant",\n            input_text="What about the weather in Paris?",\n            user_id="user_001",\n            session_id="sess_001"  # Reusing the same session\n        )\n        results.append(result)\n    except Exception as e:\n        print(f"Error running workflow for user_001: {e}")\n    \n    print("\\nAll workflows completed!")\n    return results\n\n\nif __name__ == "__main__":\n    print("ðŸš€ Starting Multi-User Agents Manager Example ðŸš€")\n    asyncio.run(main())\n    print("\\nâœ… Multi-user example completed!")