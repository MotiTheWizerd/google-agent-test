"""Example usage of the agents manager module."""\n\nimport asyncio\nimport os\nfrom dotenv import load_dotenv\n\n# Add src to Python path\nimport sys\nsys.path.insert(0, os.path.join(os.path.dirname(__file__), '..'))\n\nfrom modules.core.agents_manager import AgentsManager\nfrom modules.core.workflow_builder import WorkflowBuilder\n\n\n# Load environment variables\nload_dotenv()\n\n\ndef get_current_weather(location: str) -> str:\n    """Mock tool to get current weather."""\n    return f"The weather in {location} is sunny with a temperature of 22Â°C (72Â°F)."\n\n\ndef search_web(query: str) -> str:\n    """Mock tool to search the web."""\n    return f"Search results for '{query}': This is a mock search result. In a real implementation, this would contain actual information about {query}."\n\n\nasync def main():\n    """Main example function."""\n    # Create agents manager\n    manager = AgentsManager(app_name="example_app")\n    \n    # Register tools\n    manager.register_tool("get_weather", get_current_weather)\n    manager.register_tool("search_web", search_web)\n    \n    # Create a research workflow using the builder\n    builder = manager.create_workflow_builder("research_workflow")\n    builder.set_description("Research a topic and provide a summary")\n    \n    # Add a researcher agent\n    builder.add_llm_agent(\n        name="researcher",\n        model="gemini-2.0-flash",\n        instruction="You are a research specialist. Use the search_web tool to find relevant information about the given topic. Focus on gathering key facts and recent developments. Save your findings in the session state under the key 'research_notes'.",\n        tools=["search_web"],\n        output_key="research_notes"\n    )\n    \n    # Add a writer agent\n    builder.add_llm_agent(\n        name="writer",\n        model="gemini-2.0-flash",\n        instruction="You are a skilled writer who creates clear, engaging summaries. Use the research notes provided to write a well-structured summary that covers the key points about the topic. Your summary should be informative yet accessible, about 3-4 paragraphs long.",\n        output_key="final_summary"\n    )\n    \n    # Add a sequential agent to orchestrate the flow\n    builder.add_sequential_agent(\n        name="research_and_write",\n        sub_agents=["researcher", "writer"]\n    )\n    \n    # Set entry point and build\n    workflow = builder.set_entry_point("research_and_write").build()\n    \n    # Register the workflow\n    manager.register_workflow(workflow)\n    \n    # Print workflow info\n    manager.print_workflow_info("research_workflow")\n    \n    # Run the workflow\n    topic = "artificial intelligence trends in 2025"\n    try:\n        result = await manager.run_workflow(\n            workflow_name="research_workflow",\n            input_text=topic,\n            user_id="user_001",\n            session_id="session_001"\n        )\n        print("\\nWorkflow completed successfully!")\n        print(f"Final output: {result['final_output']}")\n    except Exception as e:\n        print(f"Error running workflow: {e}")\n\n\nif __name__ == "__main__":\n    print("ðŸš€ Starting Agents Manager Example ðŸš€")\n    asyncio.run(main())\n    print("\\nâœ… Example completed!")